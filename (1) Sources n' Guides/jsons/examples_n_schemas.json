{
    "Importants and things to ignore": [
        "There may be spelling errors, as English is not my native language",
        {
            "Every thing in caps-lock between _ (underscores) like": [
                "_OBJECTS_",
                "_REMEMBER_",
                "_WILL_USE_",
                "etc...",
                "don't make part of the schema"
            ]
        }
    ],
    "BASICS": {
        "this is an object": {
            "this is a key": "this is a value",
            "values can be": [
                "arrays []",
                "objects {}",
                "booleans < 'true' or 'false' (without the '') >",
                "strings (this is a string... every value inside double quotes)",
                "ints (any integer number, like 0, 1, 2...)",
                "floats < any decimal number (but you don't use a comma ',' you use dots '.'), like 0.5, 1.35, 2.037... >"
            ]
        },
        "this is an array": [
            "you can put strings",
            {
                "you can put": "objects too"
            }
        ],
        "arrays can be inside objects": "and objects can be inside arrays",
        "BUT REMEMBER": [
            "Every single .json file on any Minecraft Bedrock pack has a specific schema",
            "and in this file i'll try to explain each one (at least the ones that i know how to explain...)",
            "there will be an 'examples' object for each explained item and that is the actual schema that you'll follow"
        ]
    },
    "schemas": [
        {
            "blocks.json": {
                "_FIRST_YOU_NEED_TO_SET_A_FORMAT_VERSION_": "like:",
                "format_version": [ 1, 1, 0 ], // You should put the same value

                "_REMEMBER_": [
                    "Every 'texture' object or key in the blocks.json file references an atlas (object) name in:", 
                    "'textures/terrain_texture.json' (inside 'texture_data' object)"
                ],
                "block_name": {
                    "ambient_occlusion_exponent": [
                        "Is just a key",
                        "I don't really know what it does but it holds a float value"
                    ],
                    "carried_textures": [
                        "textures for the block being hold (not compatible with the 'variables' array)",

                        "Can be an array with only one item or an object if you'll use more than one texture atlas",

                        {
                            "examples": [
                                {
                                    "carried_textures": [
                                        "*atlas_name*"
                                    ]
                                },
                                {
                                    "carried_textures": {
                                        "up": "atlas for the top texture",
                                        "down": "atlas for the bottom texture",
                                        /*
                                        You can use:
                                        a "sides" key for all the sides (not including top and bottom)
                                        */
                                        "sides": "atlas for the sides",
                                        /*
                                        Or you can set an atlas for every direction
                                        (in cardinal points and it does not include top and bottom too)
                                        I don't have a reference for the directions basing on the cordinates yet...
                                        But it should be:
                                        */
                                        "north": "for +X (positive X)",
                                        "south": "for -X (negative X)",
                                        "east": "for +Z (positive Z)",
                                        "west": "for -Z (negative Z)"
                                    }
                                }
                            ]
                        }
                    ],
                    "textures": [
                        "textures for the block on the ground (suports variables)",
                        "The rest is the same as the 'carried_textures' object above"
                    ],
                    "isotropic": [
                        "Is an object only",
                        "Defines if each face texture of the block will be randomly rotated",
                        "You use the direction keys ('up', 'down', 'sides', 'north', 'south', etc...)",
                        "And the values are booleans only (true or false)",

                        {
                            "examples": [
                                {
                                    "isotropic": {
                                        "_DEFAULT_IS_": false,
                                        "up": true,
                                        "down": false,
                                        "sides": true
                                    }
                                }
                            ]
                        }
                    ],
                    "sound": [
                        "is just a key",
                        "it defines what sounds the block will use",
                        "(from the 'block_sounds' object inside 'interactive_sounds' in the sounds.json file)",
                        {
                            "examples": [
                                {
                                    "sound": "grass",
                                    "_WILL_USE_": "From sounds.json: 'interactive_sounds/block_sounds/grass'" // The '/' means that one is inside the other, like file paths but for objects...
                                    // There will be the step, place, break, fall, jump and more sound names
                                    // from 'sounds/sound_definitions.json' (will be explained later)
                                }
                            ]
                        }
                    ]
                }
            },
            "textures/terrain_texture.json": {
                "_REMEMBER_": [
                    "in this file you'll change the textures configs for blocks",
                    {
                        "With this file you can do": [
                            "change the texture image path",
                            "set texture variations",
                            "and even add/change color overlays (like the grass color variation depemding on the biome)"
                            // You can notice that there are gray textures. Like grass_side.tga, tall_grass.tga, etc
                            // And these gray textures have an 'overlay_color' key to define what color will be blended with the grays
                        ]
                    }
                ],
                "resource_pack_name": "vanilla", // It don't think that it makes difference but use 'vanilla'
                // If you're going to make just a resource pack without a behaviour 
                "atlas_name": "atlas.terrain", // This can not be changed (else, the file won't work and you'll probably get errors)
                "padding": 8, // Don't know what it does
                "num_mip_levels": 4, // Don't know what it does
                "texture_data": {
                    "*atlas_name*": { // This is what will be referenced in blocks.json
                        "textures": [ // Here you can use:
                            // If there will be only one texture, put the path as a string on the value
                            "a/texture/path/including/the_file_name", // But without the extention
                            // Or
                            {
                                "path": "texture/path",
                                "overlay_color": "HEX color (for a gray texture)" // This is used in grass_side texture, for example
                            },
                            // Or
                            {
                                "variations": [
                                    {
                                        "path": "texture/path", "weight": "(int)", // "weight" defines the chances of spawning the variation
                                        // So, if they're all the same, they have the same chances of spawning
                                        // If there is a variation with a weight of 2 and two more with 1, the one with 2 will have higher chances of spawning

                                        // But the "weight" is optional
                                        "example": {
                                            "variations": [
                                                {
                                                    "path": "texture/path",
                                                    "weight": 1
                                                },
                                                {
                                                    "path": "texture/path",
                                                    "weight": 1
                                                },
                                                {
                                                    "path": "texture/path",
                                                    "weight": 1
                                                },
                                                {
                                                    "path": "texture/path",
                                                    "weight": 1
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                }
            }
        }
    ]
}